---
import meetupGroups from '../data/meetup-groups.json';

interface Props {
  url: string;
  title: string;
  fallbackImage?: string;
  showMetadata?: boolean;
}

// Define the type for meetup metadata
interface MeetupMetadata {
  imageUrl: string;
  title?: string;
  description?: string;
}

// Type assertion for the imported JSON
const typedMeetupMetadata = meetupGroups as Record<string, MeetupMetadata>;

const { url, title, fallbackImage = '/images/default-meetup.jpg', showMetadata = false } = Astro.props;

// Determine the type of URL
const isMeetupUrl = url.includes('meetup.com');
const isLinkedInUrl = url.includes('linkedin.com');
const isExternalUrl = !isMeetupUrl && !isLinkedInUrl;

// Check if we have pre-fetched metadata for this URL
let imageUrl = fallbackImage;
let metadataTitle = title;
let metadataDescription = '';

// For LinkedIn URLs, always use the LinkedIn default image
if (isLinkedInUrl) {
  imageUrl = '/images/linkedin-default.jpg';
  if (typedMeetupMetadata[url]) {
    metadataTitle = typedMeetupMetadata[url].title || title;
    metadataDescription = typedMeetupMetadata[url].description || '';
  }
} else if (typedMeetupMetadata[url]) {
  // Use the pre-fetched metadata for non-LinkedIn URLs
  imageUrl = typedMeetupMetadata[url].imageUrl;
  metadataTitle = typedMeetupMetadata[url].title || title;
  metadataDescription = typedMeetupMetadata[url].description || '';
} else if (isExternalUrl) {
  // Use platform-specific default images if no pre-fetched metadata
  imageUrl = '/images/external-default.jpg';
}
---

<div class="url-container">
  <div class="url-image">
    <a href={url} target="_blank" rel="noopener noreferrer">
      <img 
        src={imageUrl} 
        alt={title} 
        class="cover-image"
        loading="lazy"
      />
    </a>
  </div>
  {showMetadata && (
    <div class="url-metadata">
      <h3 class="og-title"><a href={url} target="_blank" rel="noopener noreferrer">{metadataTitle}</a></h3>
      {metadataDescription && (
        <div class="og-description">{metadataDescription}</div>
      )}
    </div>
  )}
</div>

<style>
  .url-container {
    width: 100%;
  }
  
  .url-image {
    width: 100%;
    position: relative;
  }
  
  .cover-image {
    width: 100%;
    height: auto;
    border-radius: 4px;
    object-fit: cover;
    aspect-ratio: 16/9;
    max-height: 150px;
    transition: opacity 0.3s ease;
  }
  
  .url-metadata {
    margin-top: 0.5rem;
  }
  
  .og-title {
    font-weight: bold;
    font-size: 0.9rem;
    margin-bottom: 0.25rem;
    margin-top: 0;
  }
  
  .og-title a {
    color: #0077cc;
    text-decoration: none;
  }
  
  .og-title a:hover {
    text-decoration: underline;
  }
  
  .og-description {
    font-size: 0.8rem;
    color: #666;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
</style> 