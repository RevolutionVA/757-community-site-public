name: Process Event Submission

on:
  issues:
    types: [labeled]

jobs:
  process-event:
    if: github.event.label.name == 'approved' && contains(github.event.issue.labels.*.name, 'event-submission')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'
          
      - name: Setup Yarn
        run: npm install -g yarn
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Get issue data
        id: issue
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            // Parse the issue body to extract event details
            const body = issue.data.body;
            
            // Extract event details using regex
            const eventName = body.match(/### Event Name\s*\n\s*(.*)/)?.[1] || '';
            const venue = body.match(/### Venue\s*\n\s*(.*)/)?.[1] || '';
            const address = body.match(/### Address\s*\n\s*(.*)/)?.[1] || '';
            const startDate = body.match(/### Start Date\s*\n\s*(.*)/)?.[1] || '';
            const endDate = body.match(/### End Date\s*\n\s*(.*)/)?.[1] || '';
            const url = body.match(/### Event URL\s*\n\s*(.*)/)?.[1] || '';
            const description = body.match(/### Description\s*\n\s*([\s\S]*?)(?=###|$)/)?.[1]?.trim() || '';
            const eventType = body.match(/### Event Type\s*\n\s*(.*)/)?.[1] || '';
            
            // Format start date to ISO string
            let formattedStartDate;
            try {
              formattedStartDate = new Date(startDate).toISOString();
            } catch (e) {
              formattedStartDate = new Date().toISOString(); // Fallback to current date
            }
            
            // Format end date to ISO string if provided
            let formattedEndDate = null;
            if (endDate && endDate.trim()) {
              try {
                formattedEndDate = new Date(endDate).toISOString();
              } catch (e) {
                // If end date is invalid, don't include it
              }
            }
            
            // Create event object
            const event = {
              title: eventName,
              link: url,
              date: formattedStartDate,
              description: description,
              source: "community-submission",
              venue: venue,
              address: address,
              type: eventType.toLowerCase()
            };
            
            // Add end date if provided
            if (formattedEndDate) {
              event.endDate = formattedEndDate;
            }
            
            // Note: We intentionally don't include a 'group' field for community submissions
            // This ensures they're displayed differently from meetup/group events
            
            return {
              event: event,
              issueTitle: issue.data.title
            };
      
      - name: Add event to calendar
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get the event data from previous step
            const issueData = JSON.parse(process.env.ISSUE_RESULT);
            const event = issueData.event;
            
            // Read the current calendar events
            const calendarPath = path.join(process.env.GITHUB_WORKSPACE, 'src/data/calendar-events.json');
            const calendarEvents = JSON.parse(fs.readFileSync(calendarPath, 'utf8'));
            
            // Add the new event
            calendarEvents.push(event);
            
            // Sort events by date
            calendarEvents.sort((a, b) => new Date(a.date) - new Date(b.date));
            
            // Write the updated calendar back to the file
            fs.writeFileSync(calendarPath, JSON.stringify(calendarEvents, null, 2));
            
            return "Event added successfully";
        env:
          ISSUE_RESULT: ${{ steps.issue.outputs.result }}
      
      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add src/data/calendar-events.json
          git commit -m "Add event from issue #${{ github.event.issue.number }}: ${{ fromJSON(steps.issue.outputs.result).issueTitle }}"
          git push
      
      - name: Trigger Azure Static Web Apps deployment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Create a repository dispatch event to trigger the Azure Static Web Apps workflow
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'event-added',
              client_payload: {
                message: 'Event added via issue #${{ github.event.issue.number }}'
              }
            });
      
      - name: Close issue
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'âœ… This event has been approved and added to the calendar! The issue will now be closed. The website will be updated shortly.'
            });
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            }); 